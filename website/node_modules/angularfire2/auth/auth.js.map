{"version":3,"sources":["../../../src/auth/auth.ts"],"names":[],"mappings":"AACA,OAAO,eAAA,CAAgB;AACvB,OAAO,EAAE,UAAA,EAAmB,MAAO,eAAA,CAAgB;AACnD,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,EAAE,SAAA,EAAU,MAAO,yBAAA,CAA0B;AACpD,OAAO,EAAE,WAAA,EAAa,aAAA,EAAc,MAAO,cAAA,CAAe;AAE1D,OAAO,6BAAA,CAA8B;AACrC,OAAO,wBAAA,CAAyB;AAChC,OAAO,iCAAA,CAAkC;AAGzC;IAiBE,yBAAmB,GAAgB;QAAnC,iBAgBC;QAhBkB,QAAG,GAAH,GAAG,CAAa;QACjC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QAEvB,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,UAAA,UAAU;YAC1C,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAE7E,IAAM,QAAQ,GAAG,IAAI,UAAU,CAAqB,UAAA,UAAU;YAC5D,IAAM,WAAW,GAAG,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;YACf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;QAC/E,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEI,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,8BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,EAF6F,CAE7F,CAAC;IACF,sBAAC;CA1CD,AA0CC,IAAA;SA1CY,eAAe","file":"auth.js","sourceRoot":"","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { FirebaseApp, ZoneScheduler } from 'angularfire2';\n\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/fromPromise';\n\n\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: firebase.auth.Auth;\n\n  /**\n   * Observable of authentication state; as of 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the signed-in user's ID token; which includes sign-in, sign-out, and token refresh events\n   */\n  public readonly idToken: Observable<string|null>;\n\n  constructor(public app: FirebaseApp) {\n    this.auth = app.auth();\n\n    const authState$ = new Observable(subscriber => {\n      const unsubscribe = this.auth.onAuthStateChanged(subscriber);\n      return { unsubscribe };\n    });\n    this.authState = observeOn.call(authState$, new ZoneScheduler(Zone.current));\n\n    const idToken$ = new Observable<firebase.User|null>(subscriber => {\n      const unsubscribe = this.auth.onIdTokenChanged(subscriber);\n      return { unsubscribe };\n    }).switchMap(user => {\n      return user ? Observable.fromPromise(user.getIdToken()) : Observable.of(null)\n    });\n    this.idToken = observeOn.call(idToken$, new ZoneScheduler(Zone.current));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FirebaseApp, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}