{"version":3,"sources":["../../../../src/firestore/firestore.ts"],"names":[],"mappings":"AACA,OAAO,oBAAA,CAAqB;AAG5B,OAAO,EAAE,IAAA,EAAK,MAAO,sBAAA,CAAuB;AAC5C,OAAO,uBAAA,CAAwB;AAE/B,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,WAAA,EAAY,MAAO,cAAA,CAAe;AAG3C,OAAO,EAAE,wBAAA,EAAyB,MAAO,qBAAA,CAAsB;AAC/D,OAAO,EAAE,0BAAA,EAA2B,MAAO,yBAAA,CAA0B;AAerE,MAAM,yBAAyB,aAAmC,EAAoB,OAAA,GAAU,GAAA,CAAI,EAAA,CAAG,GAAA;IACrG,MAAM,KAAA,GAAQ,OAAA,CAAQ,aAAC,CAAa,CAAC;IACrC,MAAM,GAAA,GAAM,aAAA,CAAc;IAC1B,MAAM,CAAC,EAAE,KAAA,EAAO,GAAA,EAAI,CAAE;AACxB,CAAC;AA0DD,MAAM;IAUJ,YAAmB,GAAgB,EAAE,uBAAuB;QAAzC,QAAG,GAAH,GAAG,CAAa;QACjC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;QAEjC,IAAI,CAAC,mBAAmB,GAAG,uBAAuB,CAAC,CAAC;YAClD,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC;IAQD,UAAU,CAAI,IAAY,EAAE,OAAiB;QAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,cAAc,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,0BAA0B,CAAI,GAAG,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAQD,GAAG,CAAI,IAAY;QACjB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,IAAI,wBAAwB,CAAI,GAAG,CAAC,CAAC;IAC9C,CAAC;IAKD,QAAQ;QACN,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAA;IAChD,CAAC;;AACI,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AAEK,+BAAc,GAAmE,GAAG,EAAE,CAAC;IAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;IACrB,IAAI;CACH,CAAC","file":"firestore.js","sourceRoot":"","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { from } from 'rxjs/observable/from';\nimport 'rxjs/add/operator/map';\n\nimport { Injectable } from '@angular/core';\nimport { FirebaseApp } from 'angularfire2';\n\nimport { QueryFn, AssociatedReference } from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\n\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n * \n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n * \n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery(collectionRef: firebase.firestore.CollectionReference, queryFn = ref => ref): AssociatedReference {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\n/**\n * AngularFirestore Service\n * \n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n * \n * Example:\n * \n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from 'angularfire2/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable/from';\n * \n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *   \n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n * \n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n * \n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n * \n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *     \n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n * \n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n\nexport class AngularFirestore {\n  public readonly firestore: firebase.firestore.Firestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   * @param app \n   */\n  constructor(public app: FirebaseApp, shouldEnablePersistence) {\n    this.firestore = app.firestore();\n\n    this.persistenceEnabled$ = shouldEnablePersistence ? \n      from(app.firestore().enablePersistence().then(() => true)) :\n      from(new Promise((res, rej) => { res(false); }));\n  }\n  \n  /**\n   * Create a reference to a Firestore Collection based on a path and an optional\n   * query function to narrow the result set.\n   * @param path \n   * @param queryFn \n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    const collectionRef = this.firestore.collection(path);\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection<T>(ref, query);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path. Note that documents\n   * are not queryable because they are simply objects. However, documents have \n   * sub-collections that return a Collection reference and can be queried.\n   * @param path \n   */\n  doc<T>(path: string): AngularFirestoreDocument<T> {\n    const ref = this.firestore.doc(path);\n    return new AngularFirestoreDocument<T>(ref);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FirebaseApp, },\nnull,\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}