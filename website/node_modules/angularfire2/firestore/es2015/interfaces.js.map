{"version":3,"sources":["../../../../src/firestore/interfaces.ts"],"names":[],"mappings":"AAWC,CAAC","file":"interfaces.js","sourceRoot":"","sourcesContent":["import { Subscriber } from 'rxjs/Subscriber';\nimport * as firebase from 'firebase/app';\n\nexport interface DocumentChangeAction {\n  type: firebase.firestore.DocumentChangeType;\n  payload: firebase.firestore.DocumentChange;\n}\n\nexport interface Action<T> {\n  type: string;\n  payload: T;\n};\n\nexport interface Reference<T> {\n  onSnapshot: (sub: Subscriber<any>) => any;\n}\n\n// A convience type for making a query.\n// Example: const query = (ref) => ref.where('name', == 'david');\nexport type QueryFn = (ref: firebase.firestore.CollectionReference) => firebase.firestore.Query;\n\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n * \n * Example: \n * \n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n * \n * // This addition would not be a result of the query above\n * ref.add({ \n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n */\nexport interface AssociatedReference {\n  ref: firebase.firestore.CollectionReference;\n  query: firebase.firestore.Query;\n}\n"]}