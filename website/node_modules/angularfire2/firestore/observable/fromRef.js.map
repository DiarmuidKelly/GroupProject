{"version":3,"sources":["../../../../src/firestore/observable/fromRef.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAG7C,OAAO,uBAAuB,CAAC;AAC/B,OAAO,yBAAyB,CAAC;AAEjC,kBAAwB,GAAiB;IACvC,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,UAAA,UAAU;QACpC,IAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,kBAAqB,GAAoE;IAC7F,MAAM,CAAC,QAAQ,CAAgB,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;AAC9C,CAAC;AAED,MAAM,qBAAqB,GAAyC;IAClE,MAAM,CAAC,OAAO,CAAsC,GAAG,CAAC;SACrD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,EAAE,OAAO,SAAA,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAA5B,CAA4B,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,4BAA4B,GAA6B;IAC7D,MAAM,CAAC,OAAO,CAAmC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,EAAE,OAAO,SAAA,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAA5B,CAA4B,CAAC,CAAA;AACpG,CAAC","file":"fromRef.js","sourceRoot":"","sourcesContent":["import * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Subscription } from 'rxjs/Subscription';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { ZoneScheduler } from 'angularfire2';\nimport { Action, Reference } from '../interfaces';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\n\nfunction _fromRef<T, R>(ref: Reference<T>): Observable<R> {\n  const ref$ = new Observable(subscriber => {\n    const unsubscribe = ref.onSnapshot(subscriber);\n    return { unsubscribe };\n  });\n  return observeOn.call(ref$, new ZoneScheduler(Zone.current));\n}\n\nexport function fromRef<R>(ref: firebase.firestore.DocumentReference | firebase.firestore.Query) {\n  return _fromRef<typeof ref, R>(ref).share();\n}\n\nexport function fromDocRef(ref: firebase.firestore.DocumentReference): Observable<Action<firebase.firestore.DocumentSnapshot>>{\n  return fromRef<firebase.firestore.DocumentSnapshot>(ref)\n    .map(payload => ({ payload, type: 'value' }));\n}\n\nexport function fromCollectionRef(ref: firebase.firestore.Query): Observable<Action<firebase.firestore.QuerySnapshot>> {\n  return fromRef<firebase.firestore.QuerySnapshot>(ref).map(payload => ({ payload, type: 'query' }))\n}\n"]}